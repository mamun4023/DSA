class Node{
  constructor(element){
    this.element = element;
    this.next = null;
  }
}

class Linked_list{
  constructor(){
    this.head = null;
  }

  insert(element){
    var node = new Node(element);
    var traverse = this.head;
    if(this.head == null)
      this.head = node;
    else{
       node.next = this.head;
       this.head = node;
    }
  }

  print(){
    var traverse = this.head;
    while(traverse){
      console.log(traverse.element);
      traverse = traverse.next;
      
    }
  }
}

var obj = new Linked_list();
obj.insert(10);
obj.insert(1000);
obj.insert(4000);
obj.print();




============= Functinal Implementation ===============


let Node = function(data){
    this.data = data;
    this.next = null;
}


let LinkedList = function(){

  this.head = null;

  this.insert =(data)=>{
    let newNode = new Node(data);
    if(this.head === null){
      this.head = newNode;
    }else{
      let traverse = this.head;

      while(traverse.next !== null){

        traverse = traverse.next;
      }
      traverse.next = newNode;
    }
  }


  this.Print =()=>{
    let traverse = this.head;
    while(traverse){
      document.write(traverse.data, " ")
      traverse = traverse.next;
    }
  }
}


let obj = new LinkedList();
obj.insert(10);
obj.insert(20);
obj.Print()
