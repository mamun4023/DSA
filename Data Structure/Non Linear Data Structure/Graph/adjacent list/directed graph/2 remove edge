
class Edge{
	constructor(src, dest){
		this.src = src;
		this.dest = dest;
	}
}

class Graph{
	constructor(){
	 	this.adjList = new Map();
	 }

	Insert(edge){
		const {src, dest} = edge;

		if(this.adjList.has(src)){
			this.adjList.get(src).push(dest)
		}else{
			this.adjList.set(src, [dest])
		}
	}

	BFS(startNode){
		let visited = {};
		let queue = [];

		visited[startNode] = true;
		queue.push(startNode);
		
		while(queue.length > 0){
			let currVertex = queue.shift();
			document.write(currVertex, " ");
			let neigbors = this.adjList.get(currVertex);

			for(let i in neigbors){
				let neigh = neigbors[i];

				if(!visited[neigh]){
					visited[neigh] = true;
					queue.push(neigh)
				}
			}
		}
	}


	until(node, visited){
		visited[node] = true;
		document.write(node, " ");
		let neigbors = this.adjList.get(node);
		for(let i in neigbors){
			let neigh = neigbors[i];
			if(!visited[neigh]){
				this.until(neigh, visited)
			}
		}
	}

	DFS(startNode){
		let visited = {};
		this.until(startNode, visited);
	}

	removeEdge(edge){
		const {src, dest} = edge;
		let neigbors = this.adjList.get(src);

		if(neigbors !== undefined){
			let filtered = neigbors.filter(e => e != dest);
			this.adjList.delete(src)
			this.adjList.set(src, filtered)

			if(this.adjList.get(src).length === 0)
				this.adjList.delete(src)
	
		}else{
			console.log("Edge does not exits")
		}
	}


	Print(){
		let vertics = this.adjList.keys();
		for(let vertex of vertics){
			console.log(vertex, "=>", this.adjList.get(vertex))
		}
	}
}


let obj = new Graph();
obj.Insert(new Edge('A', 'B'));
obj.Insert(new Edge('A', 'C'));
obj.Insert(new Edge('A', 'D'));
obj.Insert(new Edge('C', 'F'));
obj.Insert(new Edge('D', 'E'));

obj.Print();

console.log("===========")
obj.removeEdge(new Edge('A', 'C'))
// obj.removeEdge(new Edge('G', 'B'))
// obj.removeEdge(new Edge('A', 'D'))

obj.Print();
