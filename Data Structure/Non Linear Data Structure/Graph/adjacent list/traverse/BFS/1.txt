
class Edge{
	constructor(src, dest){
		this.src = src;
		this.dest = dest;
	}
}

class Graph{
	 constructor(){
	 	this.adjList = new Map();
	 }

	Insert(edge){
		const {src, dest} = edge;

		if(this.adjList.has(src)){
			this.adjList.get(src).push(dest)
		}else{
			this.adjList.set(src, [dest])
		}
	}

	BFS(startNode){
		let visited = {};
		let queue = [];
		visited[startNode] = true;
		queue.push(startNode);

		while(queue.length > 0){
			let currVertex = queue.shift();
			document.write(currVertex, " ");
			let neigbors = this.adjList.get(currVertex);

			for(let i in neigbors){
				let neigh = neigbors[i];

				if(!visited[neigh]){
					visited[neigh] = true;
					queue.push(neigh)
				}
			}
		}
	}

	Print(){
		let vertics = this.adjList.keys();
		console.log(vertics)
	}
}


let obj = new Graph();
obj.Insert(new Edge('A', 'B'));
obj.Insert(new Edge('A', 'C'));
obj.Insert(new Edge('B', 'D'));
obj.Insert(new Edge('C', 'E'));

obj.Print();
obj.BFS('A');



