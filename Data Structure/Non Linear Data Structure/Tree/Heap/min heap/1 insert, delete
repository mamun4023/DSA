
<script type="text/javascript">
	

function BinaryHeap(){
	let list = [];

	//heapify 
	this.minHeapify = (arr, n, i) => {
		let smallest = i;
		let l = 2 * i + 1; 
		let r = 2 * i + 2;

		// if left child is big
		if(l < n && arr[l] < arr[smallest]){
			smallest = l;
		}

		// if right child is big
		if(r < n && arr[r] < arr[smallest]){
			smallest = r;
		}

		//if big is not root
		if(smallest != i){
			let temp = arr[i];
			arr[i] = arr[smallest];
			arr[smallest] = temp;

			// heapify 
			this.minHeapify(arr, n, smallest)
		}
	}

	// insert value
	this.insert = (num) => {
		const size = list.length;

		if(size === 0){
			list.push(num)
		}else{
			list.push(num)

			// Heapify
			for(let i = parseInt(list.length /2 - 1); i>= 0; i--){
				this.minHeapify(list, list.length, i)
			}
		}
	}

	// return head
	this.getList = ()=> list;

  
	this.delete = (num) => {
		const size = list.length;

		// get the index of the number to be removed
		let i;
		for(i = 0; i<size; i++){
			if(num === list[i]){
				break;
			}
		}

		// swap the number with last element
		[list[i], list[size-1]] = [list[size-1],list[i]]

		// remove the last element
		list.splice(size - 1);

		// heapify the list again
		for(let i = parseInt(list.length/2 - 1); i>=0; i--){
			this.minHeapify(list, list.length, i)
		}
	}
}

const heap = new BinaryHeap();
heap.insert(10);
heap.insert(5);
heap.insert(4);
heap.insert(2);
heap.insert(3);
heap.insert(1);
heap.insert(0);
heap.insert(-2)
console.log(heap.getList());
heap.delete(10)
console.log(heap.getList());
</script>
