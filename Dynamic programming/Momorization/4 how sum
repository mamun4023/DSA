

// Brute force
// m = target sum
// n = number.length;
// time : O(n^m *m)
// space : O(m)
 


const howSum = (targetSum, numbers)=>{
    if(targetSum === 0) return []
    if(targetSum < 0) return null
    for(const num of numbers){
        let remainder = targetSum - num;
        let remainderResult = howSum(remainder, numbers);
        if(remainderResult != null){
            return [...remainderResult, num]
        }
      
    }

    return null
}

console.log(howSum(7, [2,3]))
console.log(howSum(7, [5, 3, 4, 7]))
console.log(howSum(7, [2, 4]))
// console.log(canSum(300, [7, 14]))        // will take some unexpected time










// Optimaized Memorized dynamic programming
// m = target sum
// n = number.length;
// time : O(n*m*m) or O(n*m^2)
// space : O(m^2)
 

const howSum = (targetSum, numbers, memo = {})=>{
    if(targetSum in memo) return memo[targetSum]
    if(targetSum === 0) return []
    if(targetSum < 0) return null
    for(const num of numbers){
        let remainder = targetSum - num;
        let remainderResult = howSum(remainder, numbers);
        if(remainderResult != null){
            memo[targetSum] = [...remainderResult, num]
            return memo[targetSum]
        }
      
    }
    memo[targetSum] = null
    return null
}

console.log(howSum(7, [2,3]))
console.log(howSum(7, [5, 3, 4, 7]))
console.log(howSum(7, [2, 4]))
console.log(howSum(300, [7, 14]))        // will take some unexpected time
